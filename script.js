const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY, // ‰æãÂ¶Ç: "AIza..."
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN, // ‰æãÂ¶Ç: "iainfo-5ef0b.firebaseapp.com"
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID, // ‰æãÂ¶Ç: "iainfo-5ef0b"
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET, // ‰æãÂ¶Ç: "iainfo-5ef0b.firebasestorage.app"
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID, // ‰æãÂ¶Ç: "874564043787"
  appId: import.meta.env.VITE_FIREBASE_APP_ID, // ‰æãÂ¶Ç: "1:874564043787:web:5409a6a9953d57f71db30e"
  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID // ‰æãÂ¶Ç: "G-S6WCZ3RGJJ"
};

// ÂàùÂßãÂåñ Firebase
const app = firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();

// ÂêØÁî®Á¶ªÁ∫øÁºìÂ≠ò
db.enablePersistence().catch(err => {
  if (err.code === 'failed-precondition') {
    console.warn('Â§öÊ†áÁ≠æÈ°µÂÜ≤Á™ÅÔºåÂª∫ËÆÆÂè™ÂºÄ‰∏Ä‰∏™');
  } else if (err.code === 'unimplemented') {
    console.warn('ÂΩìÂâçÊµèËßàÂô®‰∏çÊîØÊåÅÊåÅ‰πÖÂåñ');
  }
});

// =================================================================
// ÂÖ®Â±ÄÁä∂ÊÄÅÂíåÂ∏∏Èáè
// =================================================================
const RESUMES_COLLECTION = 'resumes';
const JOBS_COLLECTION = 'jobs';
const SETTINGS_COLLECTION = 'settings';

let currentLang = 'zh';
let userSettings = { // Áî®‰∫éÂ≠òÂÇ®‰ªé Firestore Âä†ËΩΩÁöÑÁî®Êà∑ËÆæÁΩÆ
  theme: 'light',
  language: 'zh',
  autoFillMode: 'copy'
};
let chartInstance = null; // Áî®‰∫éÊåÅÊúâÂõæË°®ÂÆû‰æãÔºåÊñπ‰æøÈîÄÊØÅ

// =================================================================
// ÂõΩÈôÖÂåñ (i18n)
// =================================================================
const translations = {
  zh: {
    dashboard: "Ê¨¢Ëøé‰ΩøÁî® ResumeFiller",
    upload_resume: "‰∏ä‰º†/ÁºñËæëÁÆÄÂéÜ",
    save_job: "Êî∂ËóèÊñ∞Â≤ó‰Ωç",
    fill_btn: "‰∏ÄÈîÆÂ°´ÂÖÖ",
    export_pdf: "üìÑ ÂØºÂá∫ PDF",
    ai_suggestion: "ü§ñ AI ‰ºòÂåñÂª∫ËÆÆ",
    stats_title: "ÊäïÈÄíÁªüËÆ°",
    login: "ÁôªÂΩï",
    register: "Ê≥®ÂÜåÊñ∞Ë¥¶Âè∑",
    email: "ÈÇÆÁÆ±",
    password: "ÂØÜÁ†Å",
    settings: "ËÆæÁΩÆ",
    language: "ËØ≠Ë®Ä Language",
    theme: "‰∏ªÈ¢ò",
    auto_fill: "Ëá™Âä®Â°´ÂÖÖÊ®°Âºè",
    copy: "Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø",
    alert: "ÂºπÁ™óÊèêÁ§∫",
    light: "ÊµÖËâ≤",
    dark: "Ê∑±Ëâ≤",
    saved: "‰øùÂ≠òÊàêÂäüÔºÅ",
    confirm_delete: "Á°ÆÂÆöÂà†Èô§ÂêóÔºü",
    please_login: "ËØ∑ÂÖàÁôªÂΩïÔºÅ",
    upload_pdf: "ËØ∑‰∏ä‰º† PDF Êñá‰ª∂",
    extract_failed: "Ëá™Âä®ÊèêÂèñÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Êñá‰ª∂ÊàñÊâãÂä®ËæìÂÖ•",
    resume_saved: "ÁÆÄÂéÜÂ∑≤‰øùÂ≠òÔºÅ",
    job_saved: "Â≤ó‰ΩçÂ∑≤Êî∂ËóèÔºÅ",
    copied: "Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥ÊùøÔºÅ",
    logout: "ÈÄÄÂá∫ÁôªÂΩï",
    chart_labels: ["Â∑≤ÊäïÈÄí", "Â∑≤ÂõûÂ§ç", "Â∑≤Èù¢ËØï", "Â∑≤ Offer"],
    save_resume_btn: "‰øùÂ≠òÁÆÄÂéÜ",
    save_job_btn: "Êî∂ËóèÂ≤ó‰Ωç",
    job_title: "Â≤ó‰ΩçÂêçÁß∞",
    job_title_placeholder: "‰æãÂ¶ÇÔºöÈ´òÁ∫ßÂâçÁ´ØÂ∑•Á®ãÂ∏à",
    company_name: "ÂÖ¨Âè∏ÂêçÁß∞",
    company_name_placeholder: "‰æãÂ¶ÇÔºöË∞∑Ê≠å",
    job_location: "Â∑•‰ΩúÂú∞ÁÇπ",
    job_location_placeholder: "‰æãÂ¶ÇÔºöÂåó‰∫¨/‰∏äÊµ∑/ËøúÁ®ã",
    salary_range: "Ëñ™ËµÑËåÉÂõ¥",
    salary_range_placeholder: "‰æãÂ¶ÇÔºö20K-35K",
    job_requirements: "Â≤ó‰ΩçË¶ÅÊ±ÇÔºàÁÆÄË¶ÅÔºâ",
    job_requirements_placeholder: "ÁÜüÁªÉÊéåÊè°React/VueÔºåÊúâ3Âπ¥ÁªèÈ™å...",
    required_fields: "Â≤ó‰ΩçÂêçÁß∞ÂíåÂÖ¨Âè∏ÂêçÁß∞‰∏∫ÂøÖÂ°´È°π",
    resume_content_required: "ËØ∑Â°´ÂÜôÁÆÄÂéÜÂÜÖÂÆπ",
    email_password_required: "ËØ∑ËæìÂÖ•ÈÇÆÁÆ±ÂíåÂØÜÁ†Å",
    login_failed: "ÁôªÂΩïÂ§±Ë¥•Ôºö",
    register_success: "Ê≥®ÂÜåÊàêÂäüÔºåÂ∑≤Ëá™Âä®ÁôªÂΩïÔºÅ",
    register_failed: "Ê≥®ÂÜåÂ§±Ë¥•Ôºö",
    ai_suggestion_placeholder: "ËØ∑ÂÖàÂú®‰∏äÊñπÊñáÊú¨Ê°Ü‰∏≠Â°´ÂÖ•ÁÆÄÂéÜÂÜÖÂÆπ",
    ai_suggestions_title: "ü§ñ AI ‰ºòÂåñÂª∫ËÆÆÔºö"
  },
  en: {
    dashboard: "Welcome to ResumeFiller",
    upload_resume: "Upload/Edit Resume",
    save_job: "Save New Job",
    fill_btn: "Auto Fill",
    export_pdf: "üìÑ Export PDF",
    ai_suggestion: "ü§ñ AI Suggestion",
    stats_title: "Application Stats",
    login: "Login",
    register: "Register",
    email: "Email",
    password: "Password",
    settings: "Settings",
    language: "Language",
    theme: "Theme",
    auto_fill: "Auto Fill Mode",
    copy: "Copy to Clipboard",
    alert: "Show Alert",
    light: "Light",
    dark: "Dark",
    saved: "Saved!",
    confirm_delete: "Are you sure you want to delete?",
    please_login: "Please login first!",
    upload_pdf: "Please upload a PDF file",
    extract_failed: "Extraction failed, please check the file or enter manually",
    resume_saved: "Resume saved!",
    job_saved: "Job saved!",
    copied: "Copied to clipboard!",
    logout: "Logout",
    chart_labels: ["Applied", "Replied", "Interviewed", "Offer"],
    save_resume_btn: "Save Resume",
    save_job_btn: "Save Job",
    job_title: "Job Title",
    job_title_placeholder: "e.g., Senior Frontend Engineer",
    company_name: "Company Name",
    company_name_placeholder: "e.g., Google",
    job_location: "Location",
    job_location_placeholder: "e.g., Beijing/Shanghai/Remote",
    salary_range: "Salary Range",
    salary_range_placeholder: "e.g., 20K-35K",
    job_requirements: "Job Requirements (Brief)",
    job_requirements_placeholder: "Proficient in React/Vue, 3 years of experience...",
    required_fields: "Job title and company name are required",
    resume_content_required: "Please fill in the resume content",
    email_password_required: "Please enter email and password",
    login_failed: "Login failed: ",
    register_success: "Registration successful, logged in automatically!",
    register_failed: "Registration failed: ",
    ai_suggestion_placeholder: "Please fill in the resume content in the text box above first",
    ai_suggestions_title: "ü§ñ AI Optimization Suggestions:"
  }
};

function t(key) {
  return translations[currentLang]?.[key] || key;
}

// =================================================================
// Ê†∏ÂøÉÂ∫îÁî®ÈÄªËæëÔºöÈ°µÈù¢Âä†ËΩΩ„ÄÅÂàùÂßãÂåñ
// =================================================================
document.addEventListener('DOMContentLoaded', () => {
  // Áªü‰∏ÄÁöÑÂàùÂßãÂåñÂÖ•Âè£
  setupAuthListener();
  loadPage();

  // ÁªëÂÆöÈùôÊÄÅ‰∫ã‰ª∂ÁõëÂê¨Âô®
  document.getElementById('logout-btn')?.addEventListener('click', logout);
  document.getElementById('language')?.addEventListener('change', (e) => {
    currentLang = e.target.value;
    userSettings.language = currentLang;
    loadPage(); // ÈáçÊñ∞Ê∏≤ÊüìUIÊñáÊú¨
    saveSettings(); // Â∞ÜËØ≠Ë®ÄÂÅèÂ•Ω‰øùÂ≠òÂà∞Firestore
  });
  document.getElementById('theme')?.addEventListener('change', saveSettings);
  document.getElementById('autoFillMode')?.addEventListener('change', saveSettings);
});

window.addEventListener('hashchange', loadPage);

// Service Worker Ê≥®ÂÜå (PWA)
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js').then(registration => {
      console.log('SW registered: ', registration);
    }).catch(registrationError => {
      console.log('SW registration failed: ', registrationError);
    });
  });
}

function loadPage() {
  const urlHash = window.location.hash || '#dashboard';
  document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
  document.querySelectorAll('nav a').forEach(link => link.classList.remove('active'));

  const targetPage = document.querySelector(urlHash);
  if (targetPage) targetPage.classList.add('active');

  const activeLink = document.querySelector(`a[href="${urlHash}"]`);
  if (activeLink) activeLink.classList.add('active');

  // Êõ¥Êñ∞ÊâÄÊúâÂ∏¶ data-i18n Â±ûÊÄßÁöÑÂÖÉÁ¥†ÁöÑÊñáÊú¨
  document.querySelectorAll('[data-i18n]').forEach(el => {
    const key = el.getAttribute('data-i18n');
    if (el.tagName === 'INPUT' || el.tagName === 'TEXTAREA') {
        el.placeholder = t(key);
    } else {
        el.textContent = t(key);
    }
  });

  // Â¶ÇÊûúÂú® dashboard È°µÈù¢ÔºåÊ∏≤ÊüìÂõæË°®
  if (urlHash === '#dashboard') {
      renderStatsChart();
  }
}

// =================================================================
// Ê®°ÊÄÅÊ°ÜÊéßÂà∂
// =================================================================
function showModal(type) {
  const modal = document.getElementById('modal');
  const title = document.getElementById('modal-title');
  const body = document.getElementById('modal-body');
  const submitBtn = document.getElementById('modal-submit');

  modal.style.display = 'flex';
  title.textContent = type === 'upload-resume' ? t('upload_resume') : t('save_job');

  if (type === 'upload-resume') {
    body.innerHTML = `
      <p>${t('upload_pdf')}</p>
      <input type="file" id="resumeFile" accept=".pdf,.doc,.docx" />
      <p style="margin-top: 1rem; font-size: 0.9rem; color: #666;">${t('extract_failed')}</p>
      <textarea id="resumeText" placeholder="${t('extract_failed')}"></textarea>
      <button class="btn-secondary" style="margin-top: 1rem;" onclick="exportResumeAsPDF('temp')">${t('export_pdf')}</button>
      <button class="btn-secondary" style="margin-top: 1rem;" onclick="showAISuggestionDialog()">${t('ai_suggestion')}</button>
    `;
    document.getElementById('resumeFile').addEventListener('change', extractText);
    submitBtn.textContent = t('save_resume_btn');
    submitBtn.onclick = saveResume;
  } else if (type === 'new-job') {
    body.innerHTML = `
      <div class="form-group">
        <label>${t('job_title')}</label>
        <input type="text" id="jobTitle" placeholder="${t('job_title_placeholder')}" />
      </div>
      <div class="form-group">
        <label>${t('company_name')}</label>
        <input type="text" id="companyName" placeholder="${t('company_name_placeholder')}" />
      </div>
      <div class="form-group">
        <label>${t('job_location')}</label>
        <input type="text" id="location" placeholder="${t('job_location_placeholder')}" />
      </div>
      <div class="form-group">
        <label>${t('salary_range')}</label>
        <input type="text" id="salary" placeholder="${t('salary_range_placeholder')}" />
      </div>
      <div class="form-group">
        <label>${t('job_requirements')}</label>
        <textarea id="jobRequirements" placeholder="${t('job_requirements_placeholder')}" rows="4"></textarea>
      </div>
    `;
    submitBtn.textContent = t('save_job_btn');
    submitBtn.onclick = saveJob;
  }
}

function closeModal() {
  document.getElementById('modal').style.display = 'none';
}

// =================================================================
// ÁÆÄÂéÜÂ§ÑÁêÜ (‰∏ä‰º†„ÄÅ‰øùÂ≠ò„ÄÅÂä†ËΩΩ„ÄÅÂà†Èô§„ÄÅÂØºÂá∫)
// =================================================================
async function extractText(e) {
  const file = e.target.files[0];
  if (!file) return;

  if (!file.name.endsWith('.pdf')) {
    alert(t('upload_pdf'));
    return;
  }
  
  // TODO: ÊòæÁ§∫Âä†ËΩΩÂä®Áîª
  const reader = new FileReader();
  reader.onload = async (event) => {
    const typedArray = new Uint8Array(event.target.result);
    try {
      const pdf = await pdfjsLib.getDocument({ data: typedArray }).promise;
      let fullText = '';

      for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
        const page = await pdf.getPage(pageNum);
        const content = await page.getTextContent();
        const texts = content.items.map(item => item.str).join(' ');
        fullText += texts + '\n';
      }

      const extracted = extractResumeInfo(fullText);
      document.getElementById('resumeText').value = `ÂßìÂêçÔºö${extracted.name || '__________'}\nÁîµËØùÔºö${extracted.phone || '__________'}\nÈÇÆÁÆ±Ôºö${extracted.email || '__________'}\n\nÊïôËÇ≤ËÉåÊôØÔºö\n${extracted.education || '__________'}\n\nÂ∑•‰ΩúÁªèÈ™åÔºö\n${extracted.experience || '__________'}\n\n---\nÂéüÂßãÊñáÊú¨Ôºö\n${fullText.substring(0, 500)}${fullText.length > 500 ? '...' : ''}`.trim();

    } catch (error) {
      console.error("PDF parsing error:", error);
      alert(t('extract_failed'));
    } finally {
      // TODO: ÈöêËóèÂä†ËΩΩÂä®Áîª
    }
  };
  reader.readAsArrayBuffer(file);
}

// Ê≥®ÊÑèÔºöËøô‰∏™Ê≠£ÂàôÊèêÂèñÈùûÂ∏∏Âü∫Á°ÄÔºå‰ªÖÈÄÇÁî®‰∫éÊ†ºÂºèÂõ∫ÂÆöÁöÑÁÆÄÂéÜ„ÄÇ
function extractResumeInfo(text) {
  const nameMatch = text.match(/(?:ÂßìÂêç|Name)[:Ôºö\s]*(.+?)(?:\n|$)/i);
  const phoneMatch = text.match(/(?:ÁîµËØù|ÊâãÊú∫|Phone|Tel)[:Ôºö\s]*([\d\-+\s]{7,})/i);
  const emailMatch = text.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i);
  const eduMatch = text.match(/(?:ÊïôËÇ≤|Â≠¶ÂéÜ|Â≠¶Ê†°|University|College|Degree)[:Ôºö\s]*([\s\S]+?)(?=(?:Â∑•‰Ωú|ÁªèÈ™å|È°πÁõÆ|Employment|Work|Career|$))/i);
  const expMatch = text.match(/(?:Â∑•‰Ωú|ÁªèÈ™å|È°πÁõÆ|Employment|Work|Career)[:Ôºö\s]*([\s\S]+?)(?=(?:ÊäÄËÉΩ|È°πÁõÆ|Ëç£Ë™â|Skills|$))/i);

  return {
    name: nameMatch ? nameMatch[1].trim() : '',
    phone: phoneMatch ? phoneMatch[1].trim() : '',
    email: emailMatch ? emailMatch[1].trim() : '',
    education: eduMatch ? eduMatch[1].trim() : '',
    experience: expMatch ? expMatch[1].trim() : ''
  };
}

async function saveResume() {
  const text = document.getElementById('resumeText').value.trim();
  if (!text) {
    alert(t('resume_content_required'));
    return;
  }

  const user = auth.currentUser;
  if (!user) {
    alert(t('please_login'));
    return;
  }
  
  // TODO: ÊòæÁ§∫‰øùÂ≠ò‰∏≠Áä∂ÊÄÅ
  try {
    await db.collection(RESUMES_COLLECTION).add({
      userId: user.uid,
      name: `ÁÆÄÂéÜ_${new Date().toLocaleDateString()}`,
      content: text,
      createdAt: firebase.firestore.FieldValue.serverTimestamp()
    });
    closeModal();
    loadResumes();
    alert(t('resume_saved'));
  } catch (error) {
    console.error("Error saving resume: ", error);
    alert(error.message);
  } finally {
    // TODO: ÈöêËóè‰øùÂ≠ò‰∏≠Áä∂ÊÄÅ
  }
}

async function loadResumes() {
  const user = auth.currentUser;
  const list = document.getElementById('resume-list');
  
  if (!user) {
    list.innerHTML = `<p>${t('please_login')}</p>`;
    document.getElementById('resume-count').textContent = '0';
    return;
  }
  
  // TODO: ÊòæÁ§∫Âä†ËΩΩÂä®Áîª
  list.innerHTML = ''; // ÂÖàÊ∏ÖÁ©∫
  try {
      const snapshot = await db.collection(RESUMES_COLLECTION)
        .where('userId', '==', user.uid)
        .orderBy('createdAt', 'desc')
        .get();

      snapshot.forEach(doc => {
        const r = doc.data();
        const card = document.createElement('div');
        card.className = 'item-card';
        card.innerHTML = `
          <h3>${r.name}</h3>
          <p>${r.content.substring(0, 100)}${r.content.length > 100 ? '...' : ''}</p>
          <div class="card-actions">
            <button class="fill-btn" onclick="fillResume('${doc.id}')">${t('fill_btn')}</button>
            <button class="fill-btn" onclick="exportResumeAsPDF('${doc.id}')">${t('export_pdf')}</button>
            <button class="delete-btn" onclick="deleteResume('${doc.id}')">√ó</button>
          </div>
        `;
        list.appendChild(card);
      });
      document.getElementById('resume-count').textContent = snapshot.size;
  } catch(error) {
      console.error("Error loading resumes:", error);
      list.innerHTML = `<p>Error: ${error.message}</p>`;
  } finally {
      // TODO: ÈöêËóèÂä†ËΩΩÂä®Áîª
      renderStatsChart();
  }
}

async function deleteResume(id) {
  if (!confirm(t('confirm_delete'))) return;

  const user = auth.currentUser;
  if (!user) return;

  try {
    await db.collection(RESUMES_COLLECTION).doc(id).delete();
    loadResumes();
  } catch (error) {
    console.error("Error deleting resume: ", error);
    alert(error.message);
  }
}

async function fillResume(id) {
  const mode = userSettings.autoFillMode || 'copy';
  const user = auth.currentUser;
  if (!user) return;

  try {
    const doc = await db.collection(RESUMES_COLLECTION).doc(id).get();
    if (!doc.exists) return;
    const content = doc.data().content;

    if (mode === 'copy') {
      await navigator.clipboard.writeText(content);
      alert(t('copied'));
    } else {
      alert('ÁÆÄÂéÜÂÜÖÂÆπÔºö\n\n' + content);
    }
  } catch (error) {
    console.error("Error filling resume: ", error);
    alert(error.message);
  }
}

async function exportResumeAsPDF(resumeId) {
  let content = '';
  try {
    if (resumeId === 'temp') {
      content = document.getElementById('resumeText')?.value || '';
    } else {
      const docSnap = await db.collection(RESUMES_COLLECTION).doc(resumeId).get();
      if (docSnap.exists) {
        content = docSnap.data().content;
      }
    }
    if (content) {
      generatePDF(content);
    } else {
        alert("Ê≤°ÊúâÂèØ‰ª•ÂØºÂá∫ÁöÑÂÜÖÂÆπ„ÄÇ");
    }
  } catch (error) {
      console.error("Error preparing PDF export: ", error);
      alert(error.message);
  }
}

/**
 * ÁîüÊàê PDF (Â∑≤‰øÆÂ§ç‰∏≠Êñá‰π±Á†ÅÈóÆÈ¢ò)
 *
 * @param {string} content - Ë¶ÅÂÜôÂÖ• PDF ÁöÑÊñáÊú¨ÂÜÖÂÆπ
 * @requires 
 * 1. Âú®‰Ω†ÁöÑÈ°πÁõÆ‰∏≠ÂºïÂÖ• jspdf.umd.min.js
 * 2. „ÄêÈáçË¶Å„Äë‰∏ãËΩΩ‰∏Ä‰∏™ÊîØÊåÅ‰∏≠ÊñáÁöÑ .ttf Â≠ó‰ΩìÊñá‰ª∂Ôºà‰æãÂ¶ÇÔºöÊÄùÊ∫êÈªë‰Ωì SourceHanSansCN-Regular.ttfÔºâ„ÄÇ
 * 3. Â∞ÜÂ≠ó‰ΩìÊñá‰ª∂ÊîæÂú®‰Ω†ÁöÑÈ°πÁõÆ public/fonts/ ÁõÆÂΩï‰∏ãÔºåÁ°Æ‰øùÂèØ‰ª•ËÆøÈóÆÂà∞„ÄÇ
 * 4. ‰Ω†ÈúÄË¶ÅÂ∞ÜÂ≠ó‰ΩìÊñá‰ª∂ËΩ¨Êç¢‰∏∫ jsPDF ÂèØËØÜÂà´ÁöÑ base64 Ê†ºÂºèÔºåÊàñ‰ΩøÁî®Â∑•ÂÖ∑/‰ª£Á†ÅÂú®ÂÆ¢Êà∑Á´ØÂä†ËΩΩ„ÄÇ
 * ‰∏Ä‰∏™ÁÆÄ‰æøÁöÑÊñπÊ≥ïÊòØ‰ΩøÁî® jsPDF ÁöÑ `addFileToVFS` Âíå `addFont`„ÄÇ
 * ‰∏ãÈù¢ÁöÑ‰ª£Á†ÅÂÅáËÆæ‰Ω†Â∑≤ÁªèÊúâ‰∏Ä‰∏™Âêç‰∏∫ `SourceHanSans-Normal.ttf` ÁöÑÂ≠ó‰ΩìÊñá‰ª∂„ÄÇ
 */
async function generatePDF(content) {
    const { jsPDF } = window.jspdf;
    const docPDF = new jsPDF();
    
    // TODO: ‰Ω†ÈúÄË¶ÅÊèê‰æõÂ≠ó‰ΩìÊñá‰ª∂„ÄÇ
    // ‰∏∫‰∫ÜËÆ©Ê≠§ÂäüËÉΩÊ≠£Â∏∏Â∑•‰ΩúÔºå‰Ω†ÈúÄË¶Å‰∏ãËΩΩ‰∏Ä‰∏™‰∏≠ÊñáÂ≠ó‰ΩìÔºàÂ¶Ç‚ÄúÊÄùÊ∫êÈªë‰Ωì‚ÄùÔºâÔºå
    // Â∞ÜÂÖ∂ÊîæÂú®‰Ω†ÁöÑÈ°πÁõÆÁõÆÂΩï‰∏≠ÔºåÂπ∂ÈÄöËøá fetch Âä†ËΩΩ„ÄÇ
    try {
        // Á§∫‰æãÔºö‰ªéÊúçÂä°Âô®Âä†ËΩΩÂ≠ó‰ΩìÊñá‰ª∂
        // const font = await fetch('/fonts/SourceHanSans-Normal.ttf').then(res => res.arrayBuffer());
        // const fontBase64 = btoa(String.fromCharCode.apply(null, new Uint8Array(font)));

        // docPDF.addFileToVFS('SourceHanSans-Normal.ttf', fontBase64);
        // docPDF.addFont('SourceHanSans-Normal.ttf', 'SourceHanSans', 'normal');
        // docPDF.setFont('SourceHanSans');

        // ‰∏¥Êó∂ÈôçÁ∫ßÊñπÊ°àÔºöÂ¶ÇÊûúÂ≠ó‰ΩìÂä†ËΩΩÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§Â≠ó‰ΩìÂπ∂ÊèêÁ§∫Áî®Êà∑
        alert("PDF ÂØºÂá∫ÂäüËÉΩÊ≠£Âú®‰ΩøÁî®Ê†áÂáÜÂ≠ó‰ΩìÔºå‰∏≠ÊñáÂèØËÉΩÊó†Ê≥ïÊòæÁ§∫„ÄÇ\nËØ∑ÈÖçÁΩÆ‰∏≠ÊñáÂ≠ó‰ΩìÊñá‰ª∂‰ª•Ëé∑ÂæóÂÆåÊï¥ÊîØÊåÅ„ÄÇ");
        docPDF.setFont('helvetica'); // Fallback font

        docPDF.setFontSize(12);
        const lines = docPDF.splitTextToSize(content, 180); // Ëá™Âä®Êç¢Ë°å
        docPDF.text(lines, 15, 20);
        docPDF.save(`ÁÆÄÂéÜ_${new Date().toISOString().split('T')[0]}.pdf`);

    } catch (error) {
        console.error("Âä†ËΩΩÂ≠ó‰ΩìÊàñÁîüÊàê PDF Â§±Ë¥•:", error);
        alert("ÂØºÂá∫ PDF Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÊéßÂà∂Âè∞Ëé∑ÂèñÊõ¥Â§ö‰ø°ÊÅØ„ÄÇ");
    }
}


// =================================================================
// Â≤ó‰ΩçÂ§ÑÁêÜ (‰øùÂ≠ò„ÄÅÂä†ËΩΩ„ÄÅÂà†Èô§„ÄÅÂ§çÂà∂)
// =================================================================
async function saveJob() {
  const job = {
    title: document.getElementById('jobTitle').value.trim(),
    company: document.getElementById('companyName').value.trim(),
    location: document.getElementById('location').value.trim(),
    salary: document.getElementById('salary').value.trim(),
    requirements: document.getElementById('jobRequirements').value.trim(),
  };

  if (!job.title || !job.company) {
    alert(t('required_fields'));
    return;
  }

  const user = auth.currentUser;
  if (!user) {
    alert(t('please_login'));
    return;
  }
  
  // TODO: ÊòæÁ§∫‰øùÂ≠ò‰∏≠
  try {
      await db.collection(JOBS_COLLECTION).add({
        userId: user.uid,
        ...job,
        createdAt: firebase.firestore.FieldValue.serverTimestamp()
      });
      closeModal();
      loadJobs();
      alert(t('job_saved'));
  } catch (error) {
      console.error("Error saving job:", error);
      alert(error.message);
  } finally {
      // TODO: ÈöêËóè‰øùÂ≠ò‰∏≠
  }
}

async function loadJobs() {
  const user = auth.currentUser;
  const list = document.getElementById('job-list');

  if (!user) {
    list.innerHTML = `<p>${t('please_login')}</p>`;
    document.getElementById('job-count').textContent = '0';
    return;
  }
  
  // TODO: ÊòæÁ§∫Âä†ËΩΩÂä®Áîª
  list.innerHTML = ''; // ÂÖàÊ∏ÖÁ©∫
  try {
    const snapshot = await db.collection(JOBS_COLLECTION)
      .where('userId', '==', user.uid)
      .orderBy('createdAt', 'desc')
      .get();
      
    snapshot.forEach(doc => {
      const j = doc.data();
      const card = document.createElement('div');
      card.className = 'item-card';
      card.innerHTML = `
        <h3>${j.title}</h3>
        <p><strong>${j.company}</strong> ¬∑ ${j.location || 'N/A'} ¬∑ ${j.salary || 'Èù¢ËÆÆ'}</p>
        <p class="requirements">${j.requirements.substring(0, 80)}${j.requirements.length > 80 ? '...' : ''}</p>
        <div class="card-actions">
            <button class="fill-btn" onclick="copyJobInfo('${doc.id}')">${t('copy')}</button>
            <button class="delete-btn" onclick="deleteJob('${doc.id}')">√ó</button>
        </div>
      `;
      list.appendChild(card);
    });
    document.getElementById('job-count').textContent = snapshot.size;
  } catch (error) {
      console.error("Error loading jobs:", error);
      list.innerHTML = `<p>Error: ${error.message}</p>`;
  } finally {
      // TODO: ÈöêËóèÂä†ËΩΩÂä®Áîª
      renderStatsChart();
  }
}

async function deleteJob(id) {
  if (!confirm(t('confirm_delete'))) return;
  const user = auth.currentUser;
  if (!user) return;
  
  try {
      await db.collection(JOBS_COLLECTION).doc(id).delete();
      loadJobs();
  } catch (error) {
      console.error("Error deleting job:", error);
      alert(error.message);
  }
}

async function copyJobInfo(id) {
  const user = auth.currentUser;
  if (!user) return;
  
  try {
      const doc = await db.collection(JOBS_COLLECTION).doc(id).get();
      if (!doc.exists) return;
      const j = doc.data();
      const info = `Â≤ó‰ΩçÔºö${j.title}\nÂÖ¨Âè∏Ôºö${j.company}\nÂú∞ÁÇπÔºö${j.location}\nËñ™ËµÑÔºö${j.salary}\nË¶ÅÊ±ÇÔºö${j.requirements}`.trim();

      await navigator.clipboard.writeText(info);
      alert(t('copied'));
  } catch (error) {
      console.error("Error copying job info:", error);
      alert(error.message);
  }
}

// =================================================================
// ËÆæÁΩÆÂ§ÑÁêÜ
// =================================================================
async function saveSettings() {
  const newSettings = {
    autoFillMode: document.getElementById('autoFillMode').value,
    theme: document.getElementById('theme').value,
    language: document.getElementById('language').value
  };

  const user = auth.currentUser;
  if (!user) {
    // ÂØπ‰∫éÊú™ÁôªÂΩïÁî®Êà∑ÔºåÂè™Â∫îÁî®ËÆæÁΩÆÔºå‰∏ç‰øùÂ≠ò
    applySettings(newSettings);
    return;
  }

  try {
    await db.collection(SETTINGS_COLLECTION).doc(user.uid).set(newSettings, { merge: true });
    userSettings = {...userSettings, ...newSettings}; // Êõ¥Êñ∞ÂÖ®Â±ÄËÆæÁΩÆÁä∂ÊÄÅ
    applySettings(userSettings);
    // ‰∏çÂÜçÂºπÁ™óÊèêÁ§∫ÔºåÂõ†‰∏∫ÊòØÂç≥Êó∂‰øùÂ≠ò
  } catch (error) {
    console.error("Error saving settings:", error);
    alert(error.message);
  }
}

async function loadSettings() {
  const user = auth.currentUser;
  if (!user) {
    // Â¶ÇÊûúÁî®Êà∑Êú™ÁôªÂΩïÔºåÂ∫îÁî®ÈªòËÆ§ËÆæÁΩÆ
    applySettings(userSettings);
    return;
  }

  try {
    const doc = await db.collection(SETTINGS_COLLECTION).doc(user.uid).get();
    if (doc.exists) {
      userSettings = doc.data();
    }
  } catch (error) {
    console.error("Error loading settings:", error);
    // Âä†ËΩΩÂ§±Ë¥•Êó∂‰ΩøÁî®ÈªòËÆ§ËÆæÁΩÆ
  } finally {
      applySettings(userSettings);
  }
}

function applySettings(settings) {
  // Â∫îÁî®‰∏ªÈ¢ò
  if (settings.theme === 'dark') {
    document.body.classList.add('dark-mode');
  } else {
    document.body.classList.remove('dark-mode');
  }
  document.getElementById('theme').value = settings.theme || 'light';

  // Â∫îÁî®ËØ≠Ë®Ä
  currentLang = settings.language || 'zh';
  document.getElementById('language').value = currentLang;
  loadPage(); // ÈáçÊñ∞Ê∏≤ÊüìUI

  // Â∫îÁî®Â°´ÂÖÖÊ®°Âºè
  document.getElementById('autoFillMode').value = settings.autoFillMode || 'copy';
}

// =================================================================
// ÁªüËÆ°ÂõæË°®
// =================================================================
async function renderStatsChart() {
  const ctx = document.getElementById('stats-chart')?.getContext('2d');
  if (!ctx) return;

  const user = auth.currentUser;
  if (!user) {
    if (chartInstance) chartInstance.destroy();
    return;
  }
  
  // TODO: ËøôÈáåÁöÑÊï∞ÊçÆÊòØÊ®°ÊãüÁöÑ„ÄÇ
  // ÁúüÂÆûÂú∫ÊôØ‰∏ãÔºå‰Ω†ÈúÄË¶ÅÂú® jobs ÈõÜÂêà‰∏≠Â¢ûÂä†‰∏Ä‰∏™ `status` Â≠óÊÆµ (‰æãÂ¶Ç 'applied', 'replied')
  // ÁÑ∂ÂêéÂú®ËøôÈáåËøõË°åÁúüÂÆûÁöÑËÅöÂêàÊü•ËØ¢ÔºåËÄå‰∏çÊòØ‰ΩøÁî®ÈöèÊú∫Êï∞„ÄÇ
  try {
      const jobsSnapshot = await db.collection(JOBS_COLLECTION).where('userId', '==', user.uid).get();
      const applied = jobsSnapshot.size;
      const replied = Math.floor(Math.random() * (applied / 2 + 1)); // Ê®°ÊãüÂõûÂ§çÊï∞
      const interviewed = Math.floor(Math.random() * (replied + 1)); // Ê®°ÊãüÈù¢ËØïÊï∞
      const offer = Math.floor(Math.random() * (interviewed / 2 + 1)); // Ê®°ÊãüOfferÊï∞

      const chartData = {
          labels: t('chart_labels'),
          datasets: [{
              label: t('stats_title'),
              data: [applied, replied, interviewed, offer],
              backgroundColor: ['#4a6fa5', '#28a745', '#ffc107', '#dc3545'],
              borderRadius: 5,
          }]
      };

      if (chartInstance) {
          chartInstance.data = chartData;
          chartInstance.update();
      } else {
          chartInstance = new Chart(ctx, {
              type: 'bar',
              data: chartData,
              options: {
                  responsive: true,
                  plugins: { legend: { display: false } },
                  scales: { y: { beginAtZero: true, ticks: { precision: 0 } } }
              }
          });
      }
  } catch (error) {
      console.error("Error rendering chart:", error);
  }
}

// =================================================================
// AI Âª∫ËÆÆ (ÊºîÁ§∫)
// =================================================================
function showAISuggestionDialog() {
  const resumeText = document.getElementById('resumeText')?.value || '';
  if (!resumeText) {
    alert(t('ai_suggestion_placeholder'));
    return;
  }

  const suggestions = [
    "Â¢ûÂä†ÈáèÂåñÁöÑÈ°πÁõÆÊàêÊûúÔºå‰æãÂ¶ÇÔºö'Â∞ÜÈ°µÈù¢Âä†ËΩΩÊó∂Èó¥‰ºòÂåñ‰∫Ü30%'ÔºåËÄå‰∏çÊòØ'‰ºòÂåñ‰∫ÜÈ°µÈù¢ÊÄßËÉΩ'„ÄÇ",
    "Ê†πÊçÆÁõÆÊ†áÂ≤ó‰ΩçÁöÑJDÔºàËÅå‰ΩçÊèèËø∞ÔºâÔºåÊèêÂèñÂÖ≥ÈîÆËØçÔºàÂ¶Ç React, Webpack, DockerÔºâÂπ∂ËûçÂÖ•Âà∞‰Ω†ÁöÑÈ°πÁõÆÁªèÂéÜ‰∏≠„ÄÇ",
    "‰ΩøÁî® STAR Ê≥ïÂàôÔºàSituation, Task, Action, ResultÔºâÊù•ÊèèËø∞‰Ω†ÁöÑÈ°πÁõÆÁªèÂéÜÔºå‰ΩøÂÖ∂Êõ¥ÂÖ∑Êù°ÁêÜÂíåËØ¥ÊúçÂäõ„ÄÇ",
    "ÈÅøÂÖç‰ΩøÁî®'Á≤æÈÄö'Á≠â‰∏ªËßÇÊÄßÂº∫ÁöÑËØçÊ±áÔºåÈô§Èùû‰Ω†Á°ÆÂÆûÊòØËØ•È¢ÜÂüüÁöÑ‰∏ìÂÆ∂„ÄÇÂèØÊõøÊç¢‰∏∫'ÁÜüÁªÉ‰ΩøÁî®'Êàñ'Êúâ...È°πÁõÆÁªèÈ™å'„ÄÇ",
    "Ê£ÄÊü•ËØ≠Ê≥ïÂíåÊãºÂÜôÈîôËØØÔºåÁ°Æ‰øùÁÆÄÂéÜÁöÑ‰∏ì‰∏öÊÄß„ÄÇ"
  ];

  alert(t('ai_suggestions_title') + "\n\n" + suggestions.join('\n\n'));
}

// =================================================================
// Firebase ËÆ§ËØÅ (ÁôªÂΩï„ÄÅÊ≥®ÂÜå„ÄÅÈÄÄÂá∫„ÄÅÁä∂ÊÄÅÁõëÂê¨)
// =================================================================
function setupAuthListener() {
  auth.onAuthStateChanged(async (user) => {
    if (user) {
      // Áî®Êà∑Â∑≤ÁôªÂΩï
      document.getElementById('login-link').textContent = `üë§ ${user.email.split('@')[0]}`;
      document.getElementById('login-link').href = '#dashboard';
      document.getElementById('logout-btn').style.display = 'inline-block';
      
      await loadSettings(); // ÁôªÂΩïÂêéÈ¶ñÂÖàÂä†ËΩΩÁî®Êà∑ËÆæÁΩÆ
      loadResumes();
      loadJobs();
    } else {
      // Áî®Êà∑Â∑≤ÈÄÄÂá∫
      document.body.classList.remove('dark-mode'); // ÈÄÄÂá∫ÂêéÊÅ¢Â§çÈªòËÆ§‰∏ªÈ¢ò
      document.getElementById('login-link').textContent = t('login');
      document.getElementById('login-link').href = '#login';
      document.getElementById('logout-btn').style.display = 'none';
      
      // Ê∏ÖÁêÜÁî®Êà∑Êï∞ÊçÆÁïåÈù¢
      document.getElementById('resume-list').innerHTML = `<p>${t('please_login')}</p>`;
      document.getElementById('job-list').innerHTML = `<p>${t('please_login')}</p>`;
      document.getElementById('resume-count').textContent = '0';
      document.getElementById('job-count').textContent = '0';
      if (chartInstance) chartInstance.destroy();
      chartInstance = null;
    }
    // Êó†ËÆ∫ÁôªÂΩï‰∏éÂê¶ÈÉΩÂà∑Êñ∞‰∏ÄÊ¨°È°µÈù¢ÊñáÊú¨
    loadPage();
  });
}

async function login() {
  const email = document.getElementById('email').value;
  const password = document.getElementById('password').value;

  if (!email || !password) {
    alert(t('email_password_required'));
    return;
  }

  try {
    await auth.signInWithEmailAndPassword(email, password);
    window.location.hash = '#dashboard';
  } catch (error) {
    alert(t('login_failed') + error.message);
  }
}

async function register() {
  const email = document.getElementById('email').value;
  const password = document.getElementById('password').value;

  if (!email || !password) {
    alert(t('email_password_required'));
    return;
  }

  try {
    await auth.createUserWithEmailAndPassword(email, password);
    alert(t('register_success'));
    window.location.hash = '#dashboard';
  } catch (error) {
    alert(t('register_failed') + error.message);
  }
}

async function logout() {
  try {
    await auth.signOut();
    // onAuthStateChanged ‰ºöËá™Âä®Â§ÑÁêÜUIÊõ¥Êñ∞
    window.location.hash = '#login';
  } catch (error) {
      console.error("Logout failed:", error);
  }
}
